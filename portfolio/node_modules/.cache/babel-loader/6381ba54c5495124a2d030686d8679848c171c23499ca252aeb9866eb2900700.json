{"ast":null,"code":"import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix) {\n  var _s = $RefreshSig$();\n  let {\n    displayName = pascalCase(prefix),\n    Component,\n    defaultProps\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const BsComponent = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_s((_ref, ref) => {\n    _s();\n    let {\n      className,\n      bsPrefix,\n      as: Tag = Component || 'div',\n      ...props\n    } = _ref;\n    const componentProps = {\n      ...defaultProps,\n      ...props\n    };\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...componentProps\n    });\n  }, \"/lLG16sCipXV/rkSG6wNNA8iEGo=\", false, function () {\n    return [useBootstrapPrefix];\n  })), \"/lLG16sCipXV/rkSG6wNNA8iEGo=\", false, function () {\n    return [useBootstrapPrefix];\n  });\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}","map":{"version":3,"names":["classNames","camelize","React","useBootstrapPrefix","jsx","_jsx","pascalCase","str","toUpperCase","slice","createWithBsPrefix","prefix","_s","$RefreshSig$","displayName","Component","defaultProps","arguments","length","undefined","BsComponent","forwardRef","_ref","ref","className","bsPrefix","as","Tag","props","componentProps","resolvedPrefix"],"sources":["/Users/tessanyquist/Documents/GitHub/Project_Website.github.io/portfolio/src/react-bootstrap/esm/createWithBsPrefix.js"],"sourcesContent":["import classNames from 'classnames';\nimport camelize from 'dom-helpers/camelize';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst pascalCase = str => str[0].toUpperCase() + camelize(str).slice(1);\n// TODO: emstricten & fix the typing here! `createWithBsPrefix<TElementType>...`\nexport default function createWithBsPrefix(prefix, {\n  displayName = pascalCase(prefix),\n  Component,\n  defaultProps\n} = {}) {\n  const BsComponent = /*#__PURE__*/React.forwardRef(({\n    className,\n    bsPrefix,\n    as: Tag = Component || 'div',\n    ...props\n  }, ref) => {\n    const componentProps = {\n      ...defaultProps,\n      ...props\n    };\n    const resolvedPrefix = useBootstrapPrefix(bsPrefix, prefix);\n    return /*#__PURE__*/_jsx(Tag, {\n      ref: ref,\n      className: classNames(className, resolvedPrefix),\n      ...componentProps\n    });\n  });\n  BsComponent.displayName = displayName;\n  return BsComponent;\n}"],"mappings":"AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAOC,QAAQ,MAAM,sBAAsB;AAC3C,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,UAAU,GAAGC,GAAG,IAAIA,GAAG,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGP,QAAQ,CAACM,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC;AACvE;AACA,eAAe,SAASC,kBAAkBA,CAACC,MAAM,EAIzC;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAAA,IAJ2C;IACjDC,WAAW,GAAGR,UAAU,CAACK,MAAM,CAAC;IAChCI,SAAS;IACTC;EACF,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EACJ,MAAMG,WAAW,GAAG,aAAAR,EAAA,eAAaV,KAAK,CAACmB,UAAU,CAAAT,EAAA,CAAC,CAAAU,IAAA,EAK/CC,GAAG,KAAK;IAAAX,EAAA;IAAA,IALwC;MACjDY,SAAS;MACTC,QAAQ;MACRC,EAAE,EAAEC,GAAG,GAAGZ,SAAS,IAAI,KAAK;MAC5B,GAAGa;IACL,CAAC,GAAAN,IAAA;IACC,MAAMO,cAAc,GAAG;MACrB,GAAGb,YAAY;MACf,GAAGY;IACL,CAAC;IACD,MAAME,cAAc,GAAG3B,kBAAkB,CAACsB,QAAQ,EAAEd,MAAM,CAAC;IAC3D,OAAO,aAAaN,IAAI,CAACsB,GAAG,EAAE;MAC5BJ,GAAG,EAAEA,GAAG;MACRC,SAAS,EAAExB,UAAU,CAACwB,SAAS,EAAEM,cAAc,CAAC;MAChD,GAAGD;IACL,CAAC,CAAC;EACJ,CAAC;IAAA,QANwB1B,kBAAkB;EAAA,EAM1C,CAAC;IAAA,QANuBA,kBAAkB;EAAA,EAMzC;EACFiB,WAAW,CAACN,WAAW,GAAGA,WAAW;EACrC,OAAOM,WAAW;AACpB"},"metadata":{},"sourceType":"module","externalDependencies":[]}