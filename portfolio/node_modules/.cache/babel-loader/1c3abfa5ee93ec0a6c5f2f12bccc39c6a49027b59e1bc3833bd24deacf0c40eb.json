{"ast":null,"code":"var _s = $RefreshSig$();\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormControl = /*#__PURE__*/_s( /*#__PURE__*/React.forwardRef(_c = _s((_ref, ref) => {\n  _s();\n  let {\n    bsPrefix,\n    type,\n    size,\n    htmlSize,\n    id,\n    className,\n    isValid = false,\n    isInvalid = false,\n    plaintext,\n    readOnly,\n    // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n    as: Component = 'input',\n    ...props\n  } = _ref;\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  let classes;\n  if (plaintext) {\n    classes = {\n      [`${bsPrefix}-plaintext`]: true\n    };\n  } else {\n    classes = {\n      [bsPrefix]: true,\n      [`${bsPrefix}-${size}`]: size\n    };\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    type: type,\n    size: htmlSize,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)\n  });\n}, \"dRD7aLIGrQLFioOe63gA8QHsbzU=\", false, function () {\n  return [useBootstrapPrefix];\n})), \"dRD7aLIGrQLFioOe63gA8QHsbzU=\", false, function () {\n  return [useBootstrapPrefix];\n});\n_c2 = FormControl;\nFormControl.displayName = 'FormControl';\nexport default _c3 = Object.assign(FormControl, {\n  Feedback\n});\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FormControl$React.forwardRef\");\n$RefreshReg$(_c2, \"FormControl\");\n$RefreshReg$(_c3, \"%default%\");","map":{"version":3,"names":["classNames","React","useContext","warning","Feedback","FormContext","useBootstrapPrefix","jsx","_jsx","FormControl","_s","forwardRef","_c","_ref","ref","bsPrefix","type","size","htmlSize","id","className","isValid","isInvalid","plaintext","readOnly","as","Component","props","controlId","classes","process","env","NODE_ENV","_c2","displayName","_c3","Object","assign","$RefreshReg$"],"sources":["/Users/tessanyquist/Documents/GitHub/Project_Website.github.io/portfolio/src/react-bootstrap/esm/FormControl.js"],"sourcesContent":["import classNames from 'classnames';\nimport * as React from 'react';\nimport { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst FormControl = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  type,\n  size,\n  htmlSize,\n  id,\n  className,\n  isValid = false,\n  isInvalid = false,\n  plaintext,\n  readOnly,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'input',\n  ...props\n}, ref) => {\n  const {\n    controlId\n  } = useContext(FormContext);\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  let classes;\n  if (plaintext) {\n    classes = {\n      [`${bsPrefix}-plaintext`]: true\n    };\n  } else {\n    classes = {\n      [bsPrefix]: true,\n      [`${bsPrefix}-${size}`]: size\n    };\n  }\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return /*#__PURE__*/_jsx(Component, {\n    ...props,\n    type: type,\n    size: htmlSize,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && `is-valid`, isInvalid && `is-invalid`, type === 'color' && `${bsPrefix}-color`)\n  });\n});\nFormControl.displayName = 'FormControl';\nexport default Object.assign(FormControl, {\n  Feedback\n});"],"mappings":";AAAA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAQ,OAAO;AAClC,OAAOC,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,kBAAkB,QAAQ,iBAAiB;AACpD,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,WAAW,GAAG,aAAAC,EAAA,eAAaT,KAAK,CAACU,UAAU,CAAAC,EAAA,GAAAF,EAAA,CAAC,CAAAG,IAAA,EAc/CC,GAAG,KAAK;EAAAJ,EAAA;EAAA,IAdwC;IACjDK,QAAQ;IACRC,IAAI;IACJC,IAAI;IACJC,QAAQ;IACRC,EAAE;IACFC,SAAS;IACTC,OAAO,GAAG,KAAK;IACfC,SAAS,GAAG,KAAK;IACjBC,SAAS;IACTC,QAAQ;IACR;IACAC,EAAE,EAAEC,SAAS,GAAG,OAAO;IACvB,GAAGC;EACL,CAAC,GAAAd,IAAA;EACC,MAAM;IACJe;EACF,CAAC,GAAG1B,UAAU,CAACG,WAAW,CAAC;EAC3BU,QAAQ,GAAGT,kBAAkB,CAACS,QAAQ,EAAE,cAAc,CAAC;EACvD,IAAIc,OAAO;EACX,IAAIN,SAAS,EAAE;IACbM,OAAO,GAAG;MACR,CAAE,GAAEd,QAAS,YAAW,GAAG;IAC7B,CAAC;EACH,CAAC,MAAM;IACLc,OAAO,GAAG;MACR,CAACd,QAAQ,GAAG,IAAI;MAChB,CAAE,GAAEA,QAAS,IAAGE,IAAK,EAAC,GAAGA;IAC3B,CAAC;EACH;EACAa,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAG7B,OAAO,CAACyB,SAAS,IAAI,IAAI,IAAI,CAACT,EAAE,EAAE,mEAAmE,CAAC,GAAG,KAAK,CAAC;EACvJ,OAAO,aAAaX,IAAI,CAACkB,SAAS,EAAE;IAClC,GAAGC,KAAK;IACRX,IAAI,EAAEA,IAAI;IACVC,IAAI,EAAEC,QAAQ;IACdJ,GAAG,EAAEA,GAAG;IACRU,QAAQ,EAAEA,QAAQ;IAClBL,EAAE,EAAEA,EAAE,IAAIS,SAAS;IACnBR,SAAS,EAAEpB,UAAU,CAACoB,SAAS,EAAES,OAAO,EAAER,OAAO,IAAK,UAAS,EAAEC,SAAS,IAAK,YAAW,EAAEN,IAAI,KAAK,OAAO,IAAK,GAAED,QAAS,QAAO;EACrI,CAAC,CAAC;AACJ,CAAC;EAAA,QAtBYT,kBAAkB;AAAA,EAsB9B,CAAC;EAAA,QAtBWA,kBAAkB;AAAA,EAsB7B;AAAC2B,GAAA,GAxCGxB,WAAW;AAyCjBA,WAAW,CAACyB,WAAW,GAAG,aAAa;AACvC,eAAAC,GAAA,GAAeC,MAAM,CAACC,MAAM,CAAC5B,WAAW,EAAE;EACxCL;AACF,CAAC,CAAC;AAAC,IAAAQ,EAAA,EAAAqB,GAAA,EAAAE,GAAA;AAAAG,YAAA,CAAA1B,EAAA;AAAA0B,YAAA,CAAAL,GAAA;AAAAK,YAAA,CAAAH,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}